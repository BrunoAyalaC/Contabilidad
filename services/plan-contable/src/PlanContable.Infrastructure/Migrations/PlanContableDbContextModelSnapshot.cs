// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlanContable.Infrastructure.Data;

#nullable disable

namespace PlanContable.Infrastructure.Migrations
{
    [DbContext(typeof(PlanContableDbContext))]
    partial class PlanContableDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlanContable.Domain.Entities.CuentaContable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActualizadoPorUsuarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("CreadoPorUsuarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Elemento")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<bool>("EsMovimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("EstaActivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("FechaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Nivel")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("PadreId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique()
                        .HasDatabaseName("IX_CuentasContables_Codigo");

                    b.HasIndex("Elemento")
                        .HasDatabaseName("IX_CuentasContables_Elemento");

                    b.HasIndex("EstaActivo")
                        .HasDatabaseName("IX_CuentasContables_EstaActivo");

                    b.HasIndex("Nivel")
                        .HasDatabaseName("IX_CuentasContables_Nivel");

                    b.HasIndex("PadreId")
                        .HasDatabaseName("IX_CuentasContables_PadreId");

                    b.HasIndex("Elemento", "Nivel")
                        .HasDatabaseName("IX_CuentasContables_Elemento_Nivel");

                    b.ToTable("CuentasContables", null, t =>
                        {
                            t.HasCheckConstraint("CK_CuentasContables_Codigo_Numerico", "\"Codigo\" ~ '^[0-9]+$'");

                            t.HasCheckConstraint("CK_CuentasContables_Elemento", "\"Elemento\" IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')");

                            t.HasCheckConstraint("CK_CuentasContables_Nivel", "\"Nivel\" >= 1 AND \"Nivel\" <= 5");
                        });
                });

            modelBuilder.Entity("PlanContable.Domain.Entities.LogAuditoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Detalles")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DireccionIP")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<long?>("DuracionMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EntidadId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MensajeError")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Resultado")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValoresAnteriores")
                        .HasColumnType("text");

                    b.Property<string>("ValoresNuevos")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Entidad")
                        .HasDatabaseName("IX_LogsAuditoria_Entidad");

                    b.HasIndex("Fecha")
                        .HasDatabaseName("IX_LogsAuditoria_Fecha");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("IX_LogsAuditoria_UsuarioId");

                    b.HasIndex("Entidad", "EntidadId")
                        .HasDatabaseName("IX_LogsAuditoria_Entidad_EntidadId");

                    b.ToTable("LogsAuditoria", (string)null);
                });

            modelBuilder.Entity("PlanContable.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BloqueoHasta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IntentosFallidos")
                        .HasColumnType("integer");

                    b.Property<string>("NombreCompleto")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Usuarios_Username");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("PlanContable.Domain.Entities.CuentaContable", b =>
                {
                    b.HasOne("PlanContable.Domain.Entities.CuentaContable", "Padre")
                        .WithMany("Hijos")
                        .HasForeignKey("PadreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Padre");
                });

            modelBuilder.Entity("PlanContable.Domain.Entities.LogAuditoria", b =>
                {
                    b.HasOne("PlanContable.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PlanContable.Domain.Entities.CuentaContable", b =>
                {
                    b.Navigation("Hijos");
                });
#pragma warning restore 612, 618
        }
    }
}
